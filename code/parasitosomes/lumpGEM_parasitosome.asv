function [activeRxns, LumpedRxnFormulas, bbbNames, DPsAll, IdNCNTNER, relaxedDGoVarsValues] = lumpGEM_parasitosome(GSM_ForLumping, otherReactionsGSMForLump_idx, DB_AlbertyUpdate, BBBsToExclude,  FluxUnits, NumOfLumped, CplexParameters, RxnNames_PrevThermRelax, MIPpath,save_path,mu_max, num_drains_active,intermediary_saving_path)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Description of the function

% This function
%
% INPUTS
% - GSM_ForLumping: Genome scale model used for the lumping
% - otherReactionsGSMForLump_idx: Indices of non-core reactions. These indices
%   are according to GSM_ForLumping indexing.
% - InorgMetSEEDIDs:
% - met_pairs_to_remove:
% - DB_AlbertyUpdate:
% - AerobicAnaerobic:
%
% OUTPUTS
% - rxns_total: these are the reactions that participate in each lumped
%   reaction. For each bbb, is a set of reactions that are required to
%   constitute a lumped reaction.
% - activeRxns: Is a cell, where the first column corresponds to the
%   indices of the reactions that participate in each lumprd reaction, and
%   the second column to the actual reaction formulas of these reactions.
% - LumpedRxnFormulas: The reaction formulas of every lumped reaction
% - bbbNames: Names of the bbb that is produced by each lumped
% - DPsAll: Solutions of the system corresponding to distinct DPs. It is a
%   cell with number of cells equal to the number of biomass building
%   blocks. For each bbb there are so many DPs as defined by NumDPperBBB.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Set properly the desired parameters for cplex LP and MILP
%if~exist(intermediary_saving_path,"file")
%flag: for each lumped reaction, how many alternative lumped reactions should the solver look for?
if strcmp(NumOfLumped,'OnePerBBB')
    NumAltLUMPedPerBBB = 1;
    SizeLUMPNetwork = 0.5;
elseif strcmp(NumOfLumped,'Smin')
    NumAltLUMPedPerBBB = 10^4;
    SizeLUMPNetwork = 0.5;
elseif strcmp(NumOfLumped,'Sminp1')
    NumAltLUMPedPerBBB = 10^4;
    SizeLUMPNetwork = 1.5;
elseif strcmp(NumOfLumped,'Sminp2')
    NumAltLUMPedPerBBB = 10^4;
    SizeLUMPNetwork = 2.5;
elseif strcmp(NumOfLumped,'Sminp3')
    NumAltLUMPedPerBBB = 10^4;
    SizeLUMPNetwork = 3.5;
else
    error('Wrong option!')
end

% Inititate an array to store the results across alternatives
DPsAll = {};

% For easier operations we just rename the other reactions to indices of Non-core reactions (IdNCR)
IdNCR = otherReactionsGSMForLump_idx;
IdCR = setdiff(1:size(GSM_ForLumping.rxns,1),IdNCR);

% make sure biomass isnt included in the non-core list (which is used for lumping)
[ab, ba] = ismember(find(GSM_ForLumping.c), IdNCR);
if ab==1
    IdNCR(ba)=[];
end


% This is the maximum theoretical yield under the particular media.
sol_obj = solveFBAmodelCplex(GSM_ForLumping);
muMax = sol_obj.f;
if muMax == 0
    muMax = 0.1;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% create outward drains for substrates of biomass rxn, and inward for products (why not the other way around?)

% bbb metnames are all the bbb
bbb_metnames = GSM_ForLumping.mets(find(GSM_ForLumping.S(:,find(GSM_ForLumping.c))<0));

% Create a submodel
LumpCstModel = GSM_ForLumping;
LumpCstModel = checkifDrain(LumpCstModel);

% Loop through the bbb
for i = 1:size(bbb_metnames,1)

    %%%%%%%%%%%%%%%%%%%%%%%%
    % Add the drain 
    bbb_i_DM_RxnName = ['DM_' regexprep(bbb_metnames{i},'-','_')];

    stoichCoeffOfDrainedBBB = -1;
    revFlag    = true;
    lowerBound = 0;
    upperBound = 60; % 30
    objCoeff   = 0;
    subSystem  = 'Demand';

    [LumpCstModel, DMrxnIDexists ] = addReaction(LumpCstModel, bbb_i_DM_RxnName, bbb_metnames(i), stoichCoeffOfDrainedBBB, revFlag, lowerBound, upperBound, objCoeff, subSystem);
    
    %%%%%%%%%%%%%%%%%%%%%%%%
    % if this demand reaction already exists, change the  name to the predefined one, so that
    % we can call it correctly below when we perform he check of lumping for each bbb

    if ~isempty(DMrxnIDexists)
        
        fprintf('Renaming reaction: %s  to  %s\n',LumpCstModel.rxns{DMrxnIDexists},bbb_i_DM_RxnName)
        
        LumpCstModel.rxns{DMrxnIDexists} = bbb_i_DM_RxnName;

        % Change also the bounds to [0 60] to be sure that the bbb can be excreted
        LumpCstModel.lb(DMrxnIDexists) = 0;
        LumpCstModel.ub(DMrxnIDexists) = 60; %30

    else

        LumpCstModel.rxnMapResult{end+1} = 'drain flux';
        LumpCstModel.isDrain(end+1) = 1;
        LumpCstModel.isTrans(end+1) = 0;

    end

end

% - LumpCstModel is based on GSM_ForLumping, and has the following:
%   (i) Adds demand-reactions (DM_) for all the biomass building blocks
%   (ii) Includes the DM_GAM_c reaction that Meric added for feasibility
%   (iii) Adds thermodynamic constraints for the core system, using
%   convToTFBA_BBB (generates thermodynamic variables ONLY for the core system)
%   (iv) sets the upper bound of all fluxes based on the maximum allowable
%   in the system, i.e.: 6* glucose uptake (i.e. 6*10=60 mmol/gDWhr) HAS TO
%   CHANGE TO INCLUDE INPUT OF UPTAKE FLUX VALUE
%   (v) includes or not constraints to align all transports for same met in
%   same direction
%   (vi) if it is AerobicAnaerobic (AerobicAnaerobic=1), allow oxygen
%   (vii) create new binary variable that we will use to minimize the # of
%   reactions in the lumped reaction
%   (viii) now create constraint that is 1*F + 1*B + 60*BFUSE < 60.1
%   interpretation: if BFUSE is on, F and B are off. We will maximize #
%   of BFUSE to get the fewest active reactions. remember, here we havent
%   added basal fluxes
%   (ix) Meric added constraints to tighten the system. We force
%   a minimal amount of flux through the lumped reaction which makes the
%   solver operate much faster

if isfield(LumpCstModel,'A')

    solFBA = solveFBAmodelCplex(LumpCstModel);
    minObjSolVal = roundsd(0.9*solFBA.f, 1, 'floor');

else

    minObjSolVal = 1e-3;

end

[LumpCstModel,relaxedDGoVarsValues] = FBA2TFA_full(LumpCstModel,DB_AlbertyUpdate,1e3,1e6,'DGo');
LumpCstModel.relaxedDGoVarsValues = relaxedDGoVarsValues;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Investigation of possibility of the model to produce each of the bbbs w/o associated biomass production 

%%%%%%%%%%%%%%%%%%%%%%%%
% Set max growth to 0 in FBA and TFA level

% FBA level
LumpCstModel.lb(find(LumpCstModel.c))=0;
LumpCstModel.ub(find(LumpCstModel.c))=0;

% TFA level
LumpCstModel.var_lb(find(LumpCstModel.f)) = 0;
LumpCstModel.var_ub(find(LumpCstModel.f)) = 0;

% Now keep all reactions in non-core metabolism that are not transports
LumpCstModel.f = zeros(length(LumpCstModel.varNames),1);

%%%%%%%%%%%%%%%%%%%%%%%%
% Extract a subnetwork with only the core-reactions

mod_core = extractSubNetwork(LumpCstModel, LumpCstModel.rxns(IdCR));
mets_core = [mod_core.mets; bbb_metnames];
LumpCstModel = isTrans_GEMS_MoreFields(LumpCstModel, mets_core);
is_core_trans = LumpCstModel.isCoreTrans(IdNCR);

% Keep only those Non-core reactions, that are also not transport reactions
%is_ExcTrans = LumpCstModel.isExchangeTrans(IdNCR);
% The index of non-core-reactions, AND!! non-transport-reactions of core metabolites:
IdNCNTR   = IdNCR(is_core_trans==0);

%keep in ind only those that arent exchange reactions SHOULD CHANGE THIS TO
%LOOK AT MATRIX

MiY7_DMs = LumpCstModel.rxns( find(checkDrainRxns(LumpCstModel)==1) );
for i=1:length(LumpCstModel.rxns(IdNCNTR))
    if ismember(LumpCstModel.rxns(IdNCNTR(i)), MiY7_DMs)
        exch_pattern(i) = 0;
    else
        exch_pattern(i) = 1;
    end
end

% These are the indices of the LumpCstModel that are NON-core, NOT
% transport, and also NOT exchange reactions (Id NC NT NE R)
IdNCNTNER = IdNCNTR(find(exch_pattern));

% Get variable indeces for F and R of the IdNCNTNER
forward = getAllVar(LumpCstModel, {'F'});
forward = forward(IdNCNTNER);
backward = getAllVar(LumpCstModel, {'R'});
backward = backward(IdNCNTNER);

%create new binary variable that we will use to minimize the # of reactions in
%the lumped reaction
for i=1:length(IdNCNTNER)
    LumpCstModel.varNames(length(LumpCstModel.varNames)+1) = strcat('BFUSE_', LumpCstModel.rxns(IdNCNTNER(i)));
    LumpCstModel.var_ub(length(LumpCstModel.varNames))=1;
    LumpCstModel.var_lb(length(LumpCstModel.varNames))=0;
    LumpCstModel.vartypes(length(LumpCstModel.varNames)) = {'B'};
    LumpCstModel.f(length(LumpCstModel.varNames))=1; %this line makes objective
    %function function maximize BFUSE vars
end


% Find the indidces of the FUSE and BUSE variables:
ind_fu = getAllVar(LumpCstModel, {'FU'});
ind_bu = getAllVar(LumpCstModel, {'BU'});

ind_fu = ind_fu(IdNCNTNER);
ind_bu = ind_bu(IdNCNTNER);


% Add constraints BFMER5_ : FUSE + BUSE + BFUSE < 1
ind_bfuse=getAllVar(LumpCstModel, {'BFUSE'});
[num_constr,~] = size(LumpCstModel.A);
if length(forward)==length(backward)
    for i=1:length(forward)
        LumpCstModel.rhs(num_constr+i,1) =  1;
        LumpCstModel.constraintNames{num_constr+i,1} = strcat('BFMER5_',num2str(i));
        LumpCstModel.constraintType{num_constr+i,1} = '<';
        LumpCstModel.A(num_constr+i,ind_bfuse(i)) = 1;
        LumpCstModel.A(num_constr+i, ind_fu(i)) = 1;
        LumpCstModel.A(num_constr+i, ind_bu(i)) = 1;
    end
else
    error('length(forward) not equal to length(backward)')
end

% Exclude water and bbbs that appear in more than one compartments in the
% biomass equation
bbb_not_to_lump = [{'h2o_c'} BBBsToExclude];

%get indeces of forward and backward drains of the BBBs
% Create forward/reverse drain reactions for all biomass building blocks:
% adding the hydrolysis as a bbb_element that needs to be also balanced
% And also for the additional hydrolysis reaction

bbb_drains_forward  = strcat('F_DM_', bbb_metnames);
bbb_drains_forward  = strrep(bbb_drains_forward,  '-', '_');
[~, ind_bbb_forward]  = ismember(bbb_drains_forward,  LumpCstModel.varNames);


bbb_drains_backward = strcat('R_DM_', bbb_metnames);
bbb_drains_backward = strrep(bbb_drains_backward, '-', '_');
[~, ind_bbb_backward] = ismember(bbb_drains_backward, LumpCstModel.varNames);


LumpCstModel.S = full(LumpCstModel.S);
[~, bbb] = ismember(bbb_metnames, LumpCstModel.mets);
bbb = bbb(find(bbb));
stoich_bbb = LumpCstModel.S(bbb, find(LumpCstModel.c));


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Lumping for each BBB


allBFUSEind = getAllVar(LumpCstModel, {'BFUSE'});
rxnsNamesTotal = {};
rxnFormulasTotal = {};

% We would like to avoid that any bbb (except atp, h2o, and GAM, that are
% not really bbbs) will be overproduced and hence accumulated to system,
% leading to infeasibilities.
% - Exclude the GAM related components of the bbbs
not_to_add = {'atp_c' 'h2o_c'};
[~, bnta] = ismember(bbb_metnames, not_to_add);

ind_bta=find(bnta==0);

LumpCstModel.var_ub(ind_bbb_forward(ind_bta)) =  roundsd(-muMax*stoich_bbb(ind_bta), 1, 'ceil');
LumpCstModel.var_ub(ind_bbb_forward(find(bnta))) =  0;
bbb_drains=strcat('DM_', bbb_metnames);
bbb_drains=strrep(bbb_drains, '-', '_');
[~, bmetttt]=ismember(bbb_drains, LumpCstModel.rxns);
LumpCstModel.ub(bmetttt)=LumpCstModel.var_ub(ind_bbb_forward);

LumpCstModel.b_for_lumping = roundsd(-muMax * stoich_bbb,1, 'floor');

for i = 1:length(bbb_metnames)

    fprintf("Solve LumpCstModel for bbb: %s \n",bbb_metnames{i});

    if ~ismember(bbb_metnames{i}, bbb_not_to_lump)

        dmodel = LumpCstModel;
        dmodel.var_ub(ind_bbb_backward(i)) = 0;
        dmodel.var_ub(ind_bbb_forward(i))  = 10;
        dmodel.var_lb(ind_bbb_forward(i)) = roundsd(-muMax * 0.9*stoich_bbb(i), 5, 'floor'); %negative because the coef is neg

        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

        % First solving
        TimeInSec = 30*60;
        timePolishing = 7.5*60;
        %dmodel_ = FBA2TFA_full(dmodel,DB_AlbertyUpdate,1e3,1e5,'DGo');
        if ~exist(MIPpath,"file")
            sol = solveTFAmodelCplex_v3(dmodel,'TimeInSec',TimeInSec/3,'timePolishing',timePolishing/3,'writeMIPstart',1,'writeMIPpath',MIPpath);
        else
            sol = solveTFAmodelCplex_v3(dmodel,'TimeInSec',TimeInSec/15,'timePolishing',timePolishing/15*3/4,'loadMIPstart',1,'loadMIPpath',MIPpath);
        end
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Remember here we're maximizing BFUSE vars -> minimizing non-core metab rxns
        % lumps that can't solve are saved in error and nosol
        if isempty(sol.x)
            rxnNames    = {'NA'};
            rxnFormulas = {'NA'};
        elseif isnan(sol.x) % don't we need one entry here for the if??
            rxnNames    = {'Crashed'};
            rxnFormulas = {'Crashed'};
        else
            bfuse = sol.x(allBFUSEind);
            rxnsBFUSE = find(bfuse<1e-9);%index of every bfuse var (reaction) that participates in the current lump
            if isempty(rxnsBFUSE) % lump is empty
                rxnNames    = {'ProducedByCore'};
                rxnFormulas = {'ProducedByCore'};
            else % there are reactions in the lump
                % Change the DP name, because it is just a solution!!
                if NumAltLUMPedPerBBB>1
                    path_MIP = []; %'./MIP_starts/step_2_lumpGEM_first.mst';
                    % Make a test
                    [DPs,~,~,~] = findAlternativeSubnetworks(dmodel, GSM_ForLumping, 1e4, sol, allBFUSEind, 60*60, SizeLUMPNetwork,sol.val,save_path,mu_max,num_drains_active); 
                    DPsAll{i} = DPs;
                else
                    DPsAll{i} = sol.x;
                end
                
                rxnNames = dmodel.varNames(allBFUSEind(rxnsBFUSE));% for example rxns={'BFUSE_PDH' 'BFUSE_PPCK'}
                rxnNames = strrep(rxnNames, 'BFUSE_', '');   % for example rxns={'PDH'       'PPCK'}
                [~, ba] = ismember(rxnNames, dmodel.rxns); %ba is the reaction indeces in model dmodel
                rxnFormulas = printRxnFormula(dmodel, dmodel.rxns(ba), false); %rxnns is the formulas of the reactions in model dmodel
            end
        end
        rxnsNamesTotal{i}   = rxnNames;
        rxnFormulasTotal{i} = rxnFormulas;
    end
end

%save(intermediary_saving_path);
%else
%load(intermediary_saving_path)
%DPsAll{1}(:,1) = [];
%end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
LumpedRxnFormulas = {};
bbbNames = [];
activeRxns = {};
relaxedDGoVarsValues = {};
KeepTrackOfTransToBeCore = {};

for i = 1:size(DPsAll,2)
    fprintf("Test the thermodynamic feasibility of the pathways obtained for alternative %d \n",i);
    if ~isempty(DPsAll{i})
        DPs_i = DPsAll{i};
        for j = 1:size(DPs_i, 2)
            % This function tests the thermodynamic feasibility of the
            % pathways obtained, and gives back only the feasible ones as
            % output. It also makes the coefficients of the LUMPED
            % reactions integers
            DPs_ij = DPs_i(:,j);
            timeLimitSec = 5*60;
            [bbbName_i, id_ActRxnNames_i, ActiveRxnsFormulas, LumpedRxnFormulas_i, relaxedDGoVarsValues_i, KeepTrackOfTransToBeCore_i] = testForIntegerAndThermo_parasitosome(LumpCstModel, GSM_ForLumping,DB_AlbertyUpdate, allBFUSEind, DPs_ij, muMax, IdNCNTNER, i, otherReactionsGSMForLump_idx, FluxUnits, CplexParameters, bbb_metnames, RxnNames_PrevThermRelax,timeLimitSec);
            KeepTrackOfTransToBeCore = [KeepTrackOfTransToBeCore; KeepTrackOfTransToBeCore_i];
            bbbNames = [bbbNames; bbbName_i];
            relaxedDGoVarsValues = [relaxedDGoVarsValues {relaxedDGoVarsValues_i}];
            activeRxns = [activeRxns; [{id_ActRxnNames_i} {ActiveRxnsFormulas}]];
            LumpedRxnFormulas = [LumpedRxnFormulas; LumpedRxnFormulas_i];
        end
    end
end

if ~isequal(unique(KeepTrackOfTransToBeCore), {'NA'})
    KeepTrackOfTransToBeCore_unique=setdiff(KeepTrackOfTransToBeCore, {'NA'});
    [~, ind_nc_tpt_to_be_core]=ismember(KeepTrackOfTransToBeCore_unique, GSM_ForLumping.rxns);
    IdNCNTNER=setdiff(IdNCNTNER, ind_nc_tpt_to_be_core);
end


% Remove the Lumped reactions that were not feasible
idToRemove = find(strcmp(LumpedRxnFormulas,'NA'));
LumpedRxnFormulas(idToRemove) = [];
bbbNames(idToRemove) = [];
activeRxns(idToRemove,:) = [];
relaxedDGoVarsValues(idToRemove)=[];



end


function [DPs, objectives, model, count_DP_YIELD] = findAlternativeSubnetworks(model, model_original,maxNumEPs, sol, use_vectors_indices, TimeLimitSecs, SizeLUMPNetwork, stop_search_value, save_path,mu_max,num_drains_active)
    num_sols = 0;
    count = 1;
    smallest_subnetwork = Inf;
    actUSEvecs = {};
    max_size = length(use_vectors_indices) - sol.val + (SizeLUMPNetwork-0.5);

    while (num_sols < maxNumEPs) && ~isempty(sol)

        fprintf('#######################################\n')
        fprintf('Looking for DP number %d\n', count+1)

        [~,num_vars] = size(model.A);


        if ~isempty(sol.x)
            num_sols = num_sols + 1;
            objectives(num_sols, 1) = sol.val;
            DPs(:, num_sols) = sol.x;

    
            % we find all the use vectors and formulate them into a new integer cut
            % constraint
            use_vectors_sol = ones(num_vars,1);
            use_vectors_sol(use_vectors_indices) = sol.x(use_vectors_indices);
            actUSEvec = find(use_vectors_sol<1e-9);
            actUSEvecs = [actUSEvecs,{actUSEvec}];

            if count == 1
                smallest_subnetwork = length(actUSEvec);
            end

            % Update the model with a new integer cut constraint
            model = addIntegerCutConstraint(model, actUSEvec, num_sols);

            % Solve the TFA model
            sol = solveTFAmodelCplex_v3(model,'TimeInSec',TimeLimitSecs,'timePolishing',TimeLimitSecs*3/4,'stop_search_value', stop_search_value+(-SizeLUMPNetwork+0.5),'emphPar',0, 'nodeSelec',2, 'varSelec',2,'emphMIPswitch',2);

            if isempty(sol.x)
                break;
            end

            length_sol = nnz(sol.x(use_vectors_indices) < 1e-9);

            if abs(length_sol - smallest_subnetwork) > SizeLUMPNetwork
                fprintf('In findDP_YIELD_TimeLimit.m: break because size of subnetwork > size of smallest subnetwork by %d variable(s)\n: ', length_sol - smallest_subnetwork); 
                break;
            end

            fprintf('Number of DPs:\t%d\n', num_sols);


            % Sanity check 
            if rem(num_sols,1) == 0
                 
                % Sanity check 1: make sure all the elements are same size or smaller size
                vectorSizes = cellfun(@numel, actUSEvecs);
                isValid = all(vectorSizes <= max_size+0.5);
                
                if ~isValid
                    error('Error: At least one vector in the cell array has a size larger than %d.\n',max_size);
                else
                    fprintf('All vectors in the cell array have a size equal to or less than %d.\n',max_size);
                end
        
                % Sanity check 2 to ensure actUSEvec is different from previous iterations
                if size(unique(DPs(use_vectors_indices,:)','rows'),1) < size(DPs,2)
                    error('New actUSEvec is the same as a previous one. Aborting search.');
                end
        
                % Sanity check 3 to ensure the model can grow only based on
                % the subnetworks found
                model_test = set_objective(model_original,{'Biomass_rxn_c'},1,'max',1);
                model_test.lb(find(contains(model_test.rxns,'biomass','IgnoreCase',true))) = 0;
                Rxns2Rm = strrep(model.varNames(setdiff(use_vectors_indices,actUSEvec)),'BFUSE_','');
                model_test = removeRxns(model_test,Rxns2Rm);
                sol_test =  solveFBAmodelCplex(model_test);

                % CHeck the bounds of the exchange reactions
                [~, ~, drains, ~] = putDrainsForward(model_test);
                [~,ind_drains] = ismember(drains,model_test.rxns);
                if length(find(model_test.lb(ind_drains) <0)) > num_drains_active+0.5
                   error("exchange rxns not maintained");
                end
        
                if isempty(sol_test.f) || sol_test.f < 0.10*mu_max || isnan(sol_test.f)
                    error('LumpGEM not working: subnetwork not growing')
                end

                if exist("save_path","var") && ~isempty(save_path)
                    disp('in it');
                    %save(save_path);
                end

            end


        end
        count = count + 1;
    end

    fprintf('Analysis for DPs ends with %d alternatives\n', count);
    count_DP_YIELD = count;
    fprintf('#################################################################################\n')

end

%%
% Helper function
function updatedModel = addIntegerCutConstraint(model, active_use_vectors, num_sols)
    [num_cons, num_vars] = size(model.A);
    updatedModel = model;
    updatedModel.constraintNames{num_cons + 1} = ['CUT_' num2str(num_sols)];
    new_constraint = zeros(num_vars, 1);
    new_constraint(active_use_vectors) = 1;
    updatedModel.constraintType{num_cons + 1} = '>';
    updatedModel.A(num_cons + 1, :) = new_constraint;
    updatedModel.rhs(num_cons + 1) = 0.5;
end

